/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eni.m1.java.ws.panels;

import eni.m1.java.ws.entities.Note;
import eni.m1.java.ws.entities.Utilisateur;
import eni.m1.java.ws.service.NoteService;
import eni.m1.java.ws.service.RegistreService;
import java.awt.Color;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shirleyodon
 */
public class NotePanel extends javax.swing.JPanel {

    /**
     * Creates new form NotePanel
     */
    
    private DefaultTableModel model;
    private NoteService service;
    private RegistreService registreService;
    private Utilisateur profile;
    
    public NotePanel(Utilisateur user) {
        initComponents();
        initTableGrid();
        initModel();
        initService();
        initUser(user);
    }
    
    private void initTableGrid(){
        noteTable.setGridColor(Color.lightGray);
        noteTable.setShowGrid(true);
    }
    
    private void initModel(){
        model=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        model.addColumn("N° Etudiant");
        model.addColumn("Code Matière");
        model.addColumn("Note");
    }
    
    private void fillModel(Note note){
        model.setRowCount(0);
        model.addRow(new Object[]{
            note.getNumEtudiant(),
            note.getCodeMatiere(),
            note.getNote()
        });
        noteTable.setModel(model);
    }
    
    private void fillModel(Note[] liste){
        model.setRowCount(0);
        for(Note note: liste){
            model.addRow(new Object[]{
                note.getNumEtudiant(),
                note.getCodeMatiere(),
                note.getNote()
            });
        }
        noteTable.setModel(model);
    }
    
    private void addRow(Note note){
        model.addRow(new Object[]{
            note.getNumEtudiant(),
            note.getCodeMatiere(),
            note.getNote()
        });
        noteTable.setModel(model);
    }
    
    private void initService(){
        registreService=new RegistreService();
        service=new NoteService();
        fillModel(service.getAll());
    }
    
    private void initUser(Utilisateur user){
        profile=user;
        if(profile.getStatut().equals("Visitor")){
            ajouterButton.setEnabled(false);
            modifierButton.setEnabled(false);
            supprimerButton.setEnabled(false);
        }
    }
    
    private void eraseField(){
        numEtudiantFormattedField.setValue(null);
        codeMatiereFormattedField.setValue(null);
        noteFormattedField.setText("");
        recherche1Field.setText("");
        recherche2Field.setText("");
    }
    
    private boolean estVide(JTextField field){
        return field.getText().equals("");
    }
    
    private boolean estVide(JFormattedTextField formattedField){
        return formattedField.getText().equals("");
    }
    
    private boolean estValide(JFormattedTextField formattedField){
        return formattedField.isEditValid();
    }
    
    public void setProfile(Utilisateur profile){
        this.profile = profile;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bodyPanel = new javax.swing.JPanel();
        infoPanel = new javax.swing.JPanel();
        numEtudiantLabel = new javax.swing.JLabel();
        numEtudiantFormattedField = new javax.swing.JFormattedTextField();
        codeMatiereLabel = new javax.swing.JLabel();
        codeMatiereFormattedField = new javax.swing.JFormattedTextField();
        noteLabel = new javax.swing.JLabel();
        noteFormattedField = new javax.swing.JFormattedTextField();
        listePanel = new javax.swing.JPanel();
        noteScrollPane = new javax.swing.JScrollPane();
        noteTable = new javax.swing.JTable();
        operationPanel = new javax.swing.JPanel();
        ajouterButton = new javax.swing.JButton();
        supprimerButton = new javax.swing.JButton();
        modifierButton = new javax.swing.JButton();
        actualiserButton = new javax.swing.JButton();
        recherchePanel = new javax.swing.JPanel();
        rechercheParLabel = new javax.swing.JLabel();
        rechercheComboBox = new javax.swing.JComboBox<>();
        recherche1Field = new javax.swing.JTextField();
        recherche2Field = new javax.swing.JTextField();
        rechercheButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(44, 62, 80));
        setMaximumSize(new java.awt.Dimension(685, 466));
        setMinimumSize(new java.awt.Dimension(675, 464));

        bodyPanel.setBackground(new java.awt.Color(44, 62, 80));

        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INFO SUR LA NOTE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Trebuchet MS", 1, 20), java.awt.Color.lightGray)); // NOI18N
        infoPanel.setOpaque(false);
        infoPanel.setPreferredSize(new java.awt.Dimension(194, 159));

        numEtudiantLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        numEtudiantLabel.setForeground(new java.awt.Color(236, 240, 241));
        numEtudiantLabel.setText("N° Etudiant");

        numEtudiantFormattedField.setBackground(new java.awt.Color(108, 122, 137));
        numEtudiantFormattedField.setForeground(new java.awt.Color(228, 241, 254));
        try {
            numEtudiantFormattedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("E###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        numEtudiantFormattedField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numEtudiantFormattedField.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        numEtudiantFormattedField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numEtudiantFormattedFieldActionPerformed(evt);
            }
        });

        codeMatiereLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        codeMatiereLabel.setForeground(new java.awt.Color(236, 240, 241));
        codeMatiereLabel.setText("Code Matière");

        codeMatiereFormattedField.setBackground(new java.awt.Color(108, 122, 137));
        codeMatiereFormattedField.setForeground(new java.awt.Color(228, 241, 254));
        try {
            codeMatiereFormattedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("M###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        codeMatiereFormattedField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        codeMatiereFormattedField.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        codeMatiereFormattedField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeMatiereFormattedFieldActionPerformed(evt);
            }
        });

        noteLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        noteLabel.setForeground(new java.awt.Color(236, 240, 241));
        noteLabel.setText("Note");

        noteFormattedField.setBackground(new java.awt.Color(108, 122, 137));
        noteFormattedField.setForeground(new java.awt.Color(228, 241, 254));
        noteFormattedField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        noteFormattedField.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        noteFormattedField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteFormattedFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(codeMatiereLabel)
                        .addComponent(noteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(numEtudiantLabel))
                .addGap(25, 25, 25)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(noteFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numEtudiantFormattedField)
                    .addComponent(codeMatiereFormattedField, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numEtudiantLabel)
                    .addComponent(numEtudiantFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(codeMatiereLabel)
                        .addGap(18, 18, 18)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(noteLabel)
                            .addComponent(noteFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(codeMatiereFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        listePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LISTE DES NOTES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Trebuchet MS", 1, 20), java.awt.Color.lightGray)); // NOI18N
        listePanel.setOpaque(false);

        noteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "N° Etudiant", "Code Matière", "Note"
            }
        ));
        noteTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        noteTable.setRowHeight(20);
        noteTable.setShowGrid(true);
        noteTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                noteTableMouseClicked(evt);
            }
        });
        noteScrollPane.setViewportView(noteTable);

        javax.swing.GroupLayout listePanelLayout = new javax.swing.GroupLayout(listePanel);
        listePanel.setLayout(listePanelLayout);
        listePanelLayout.setHorizontalGroup(
            listePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addContainerGap())
        );
        listePanelLayout.setVerticalGroup(
            listePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        operationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OPERATIONS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Trebuchet MS", 1, 20), java.awt.Color.lightGray)); // NOI18N
        operationPanel.setOpaque(false);

        ajouterButton.setBackground(new java.awt.Color(108, 122, 137));
        ajouterButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ajouterButton.setForeground(new java.awt.Color(228, 241, 254));
        ajouterButton.setText("Ajouter");
        ajouterButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ajouterButton.setMinimumSize(new java.awt.Dimension(79, 25));
        ajouterButton.setPreferredSize(new java.awt.Dimension(80, 25));
        ajouterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterButtonActionPerformed(evt);
            }
        });

        supprimerButton.setBackground(new java.awt.Color(108, 122, 137));
        supprimerButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        supprimerButton.setForeground(new java.awt.Color(228, 241, 254));
        supprimerButton.setText("Supprimer");
        supprimerButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        supprimerButton.setPreferredSize(new java.awt.Dimension(80, 25));
        supprimerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerButtonActionPerformed(evt);
            }
        });

        modifierButton.setBackground(new java.awt.Color(108, 122, 137));
        modifierButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        modifierButton.setForeground(new java.awt.Color(228, 241, 254));
        modifierButton.setText("Modifier");
        modifierButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        modifierButton.setPreferredSize(new java.awt.Dimension(80, 25));
        modifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierButtonActionPerformed(evt);
            }
        });

        actualiserButton.setBackground(new java.awt.Color(108, 122, 137));
        actualiserButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        actualiserButton.setForeground(new java.awt.Color(228, 241, 254));
        actualiserButton.setText("Actualiser");
        actualiserButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        actualiserButton.setPreferredSize(new java.awt.Dimension(80, 25));
        actualiserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualiserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout operationPanelLayout = new javax.swing.GroupLayout(operationPanel);
        operationPanel.setLayout(operationPanelLayout);
        operationPanelLayout.setHorizontalGroup(
            operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(operationPanelLayout.createSequentialGroup()
                        .addComponent(ajouterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(supprimerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(operationPanelLayout.createSequentialGroup()
                        .addComponent(modifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actualiserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        operationPanelLayout.setVerticalGroup(
            operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, operationPanelLayout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ajouterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supprimerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualiserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        recherchePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "RECHERCHE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Trebuchet MS", 1, 20), java.awt.Color.lightGray)); // NOI18N
        recherchePanel.setOpaque(false);

        rechercheParLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rechercheParLabel.setForeground(new java.awt.Color(236, 240, 241));
        rechercheParLabel.setText("Par");

        rechercheComboBox.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        rechercheComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "n° étudiant", "code matière & niveau", "n° étudiant & code matière" }));
        rechercheComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        recherche1Field.setBackground(new java.awt.Color(108, 122, 137));
        recherche1Field.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        recherche1Field.setForeground(new java.awt.Color(228, 241, 254));
        recherche1Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        recherche2Field.setBackground(new java.awt.Color(108, 122, 137));
        recherche2Field.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        recherche2Field.setForeground(new java.awt.Color(228, 241, 254));
        recherche2Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        rechercheButton.setBackground(new java.awt.Color(108, 122, 137));
        rechercheButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rechercheButton.setForeground(new java.awt.Color(228, 241, 254));
        rechercheButton.setText("Rechercher");
        rechercheButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rechercheButton.setPreferredSize(new java.awt.Dimension(80, 25));
        rechercheButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercheButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout recherchePanelLayout = new javax.swing.GroupLayout(recherchePanel);
        recherchePanel.setLayout(recherchePanelLayout);
        recherchePanelLayout.setHorizontalGroup(
            recherchePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recherchePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rechercheParLabel)
                .addGap(18, 18, 18)
                .addGroup(recherchePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(recherchePanelLayout.createSequentialGroup()
                        .addComponent(recherche1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(recherche2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rechercheComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(rechercheButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        recherchePanelLayout.setVerticalGroup(
            recherchePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recherchePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recherchePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rechercheParLabel)
                    .addComponent(rechercheComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(recherchePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recherche1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recherche2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rechercheButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout bodyPanelLayout = new javax.swing.GroupLayout(bodyPanel);
        bodyPanel.setLayout(bodyPanelLayout);
        bodyPanelLayout.setHorizontalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(operationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(listePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recherchePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bodyPanelLayout.setVerticalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bodyPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(operationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyPanelLayout.createSequentialGroup()
                        .addComponent(listePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(recherchePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bodyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 670, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rechercheButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercheButtonActionPerformed
        // TODO add your handling code here:
        String searchType=rechercheComboBox.getSelectedItem().toString(),
               looking1For, looking2For;
        Note note, listNote[];

        if(searchType.equals("n° étudiant")){
            if(estVide(recherche1Field) && estVide(recherche2Field)){
                JOptionPane.showMessageDialog(null, "Veuillez saisir le n° étudiant sur l'un des deux champs de recherche", "Champs vides", JOptionPane.WARNING_MESSAGE);
            }
            else{
                if(!estVide(recherche1Field)){
                    looking1For=recherche1Field.getText();
                    listNote=service.getAll(looking1For);
                    
                    if(listNote.length==0)
                        JOptionPane.showMessageDialog(null, "Aucune note correspondant à l'étudiant '"+recherche1Field.getText()+"' n'a été trouvée", "Aucun résultat", JOptionPane.WARNING_MESSAGE);
                    else{
                        fillModel(listNote);
                        eraseField();
                    }
                    registreService.saveToLog(profile.getLogin(), "RECHERCHE", "Note("+searchType+" = '"+looking1For+"')");
                }else{
                    looking2For=recherche2Field.getText();
                    listNote=service.getAll(looking2For);
                    
                    if(listNote.length==0)
                        JOptionPane.showMessageDialog(null, "Aucune note correspondant à l'étudiant '"+recherche2Field.getText()+"' n'a été trouvée", "Aucun résultat", JOptionPane.WARNING_MESSAGE);
                    else{
                        fillModel(listNote);
                        eraseField();
                    }
                    registreService.saveToLog(profile.getLogin(), "RECHERCHE", "Note("+searchType+" = '"+looking2For+"')");
                }
            }
        }else{
            if(estVide(recherche1Field) || estVide(recherche2Field)){
                JOptionPane.showMessageDialog(null, "Aucun des deux champs de recherche ne peut être laissé vide", "Champs vides", JOptionPane.WARNING_MESSAGE);
            }else{
                looking1For=recherche1Field.getText();
                looking2For=recherche2Field.getText();
                
                if(searchType.equals("n° étudiant & code matière")){
                    
                    note=service.get(looking1For, looking2For);
                    
                    if(note.getNumEtudiant()==null)
                        JOptionPane.showMessageDialog(null, "Aucune note correspondant à l'étudiant '"+looking1For+"' pour la matière '"+looking2For+"' n'a été trouvée", "Aucun résultat", JOptionPane.WARNING_MESSAGE);
                    else{
                        fillModel(note);
                        eraseField();
                    }
                }else{
                    listNote=service.getAll(looking1For, looking2For);
                    
                    if(listNote.length==0)
                        JOptionPane.showMessageDialog(null, "Aucune note correspondant à la matière '"+looking1For+"' pour le niveau '"+looking2For+"' n'a été trouvée", "Aucun résultat", JOptionPane.WARNING_MESSAGE);
                    else{
                        fillModel(listNote);
                        eraseField();
                    }
                }
                
                registreService.saveToLog(profile.getLogin(), "RECHERCHE", "Note("+searchType+" = '"+looking1For+"-"+looking2For+"')");
            }
        }
    }//GEN-LAST:event_rechercheButtonActionPerformed

    private void actualiserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualiserButtonActionPerformed
        // TODO add your handling code here:
        eraseField();
        fillModel(service.getAll());
    }//GEN-LAST:event_actualiserButtonActionPerformed

    private void modifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierButtonActionPerformed
        // TODO add your handling code here:
        Integer updated;
        Note grade;
        double note;

        if(estValide(numEtudiantFormattedField) && estValide(codeMatiereFormattedField)){
            try{
                note= Double.valueOf(noteFormattedField.getText());
                
                if(note>=0 && note<=20){
                    grade=new Note(numEtudiantFormattedField.getText(), codeMatiereFormattedField.getText(), note);

                    if(JOptionPane.showConfirmDialog(null, "Voullez-vous enregistrer la modification apportée à l'entrée '"+
                        grade.getNumEtudiant()+"-"+grade.getCodeMatiere()+"' ?", "Confirmation de mise à jour", 
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)== JOptionPane.YES_OPTION){

                        updated=service.put(grade.getNumEtudiant(), grade.getCodeMatiere(), note);

                        if(updated==1){
                            JOptionPane.showMessageDialog(null, "La modification a été enregistrée avec succès", "Succès de mise à jour", JOptionPane.INFORMATION_MESSAGE);
                            registreService.saveToLog(profile.getLogin(), "MODIFICATION", grade.getNumEtudiant()+"-"+grade.getCodeMatiere());
                            eraseField();
                            fillModel(service.getAll());
                        }else{
                            JOptionPane.showMessageDialog(null, "Echec de l'enregistrement de la modification", "Erreur de mise à jour", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }else
                    JOptionPane.showMessageDialog(null, "La note doit être comprise entre 0 et 20", "Erreur de mise à jour", JOptionPane.ERROR_MESSAGE);
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Le champ 'Note' doit être un nombre : "+e.getLocalizedMessage(), "Erreur de mise à jour", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_modifierButtonActionPerformed

    private void supprimerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerButtonActionPerformed
        // TODO add your handling code here:
        Integer deleted;
        String numEtudiant, codeMatiere;

        if(estValide(numEtudiantFormattedField) && estValide(codeMatiereFormattedField)){
            numEtudiant=numEtudiantFormattedField.getText();
            codeMatiere=codeMatiereFormattedField.getText();

            if(JOptionPane.showConfirmDialog(null, "Voullez-vous vraiment supprimer la note : '"+numEtudiant+"-"+codeMatiere+"'", 
                "Confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
                deleted=service.delete(numEtudiant, codeMatiere);

                if(deleted==1){
                    JOptionPane.showMessageDialog(null, "La note : '"+numEtudiant+"-"+codeMatiere+"' a été supprimée avec succès", "Succès de suppression", JOptionPane.INFORMATION_MESSAGE);
                    registreService.saveToLog(profile.getLogin(), "SUPPRESSION", numEtudiant+"-"+codeMatiere);
                    eraseField();
                    fillModel(service.getAll());
                }else{
                    JOptionPane.showMessageDialog(null, "Echec de la suppression de la note : '"+numEtudiant+"-"+codeMatiere+"'", "Erreur de suppression", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_supprimerButtonActionPerformed

    private void ajouterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterButtonActionPerformed
        // TODO add your handling code here:
        Note grade;
        double note;
        Integer resultat;
        
        if(!estValide(numEtudiantFormattedField) || !estValide(codeMatiereFormattedField)){
            JOptionPane.showMessageDialog(null, "Au moins un des champs 'N° Etudiant' ou 'Code Matière' est invalide", "Champs invalides", JOptionPane.WARNING_MESSAGE);
        }else if(estVide(noteFormattedField)){
            JOptionPane.showMessageDialog(null, "Le champ 'Note' ne peut être laissé vide", "Champs vides", JOptionPane.WARNING_MESSAGE);
        }else{
            try{
                note= Double.valueOf(noteFormattedField.getText());
                
                if(note>=0 && note<=20){
                    grade=new Note(numEtudiantFormattedField.getText(), codeMatiereFormattedField.getText(), note);

                    resultat=service.post(grade);

                    switch(resultat){
                        case -3:
                            JOptionPane.showMessageDialog(null, "L'étudiant '"+numEtudiantFormattedField.getText()+"' et la matière '"+codeMatiereFormattedField.getText()+"' n'existent pas dans la base de données", "Erreur d'ajout", JOptionPane.ERROR_MESSAGE);
                            break;
                        case -2:
                            JOptionPane.showMessageDialog(null, "La matière '"+codeMatiereFormattedField.getText()+"' n'existe pas dans la base de données", "Erreur d'ajout", JOptionPane.ERROR_MESSAGE);
                            break;
                        case -1:
                            JOptionPane.showMessageDialog(null, "L'étudiant '"+numEtudiantFormattedField.getText()+"' n'existe pas dans la base de données", "Erreur d'ajout", JOptionPane.ERROR_MESSAGE);
                            break;
                        case 0:
                            JOptionPane.showMessageDialog(null, "Une note pour '"+numEtudiantFormattedField.getText()+"-"+codeMatiereFormattedField.getText()+"' existe déjà dans la base de données", "Erreur d'ajout", JOptionPane.ERROR_MESSAGE);
                            break;
                        default:
                            String message= "La note = '"+grade.getNote()+"' pour l'étudiant '"+grade.getNumEtudiant()+"' pour la matière '"+grade.getCodeMatiere()+"' a été ajoutée avec succès";
                            JOptionPane.showMessageDialog(null, message, "Succès de l'ajout", JOptionPane.INFORMATION_MESSAGE);
                            registreService.saveToLog(profile.getLogin(), "AJOUT", grade.getNumEtudiant()+"-"+grade.getCodeMatiere());
                            eraseField();
                            addRow(grade);
                    }
                }else
                    JOptionPane.showMessageDialog(null, "La note doit être comprise entre 0 et 20", "Erreur d'ajout", JOptionPane.ERROR_MESSAGE);
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Le champ 'Note' doit être un nombre : "+e.getLocalizedMessage(), "Erreur d'ajout", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_ajouterButtonActionPerformed

    private void noteFormattedFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteFormattedFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noteFormattedFieldActionPerformed

    private void noteTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_noteTableMouseClicked
        // TODO add your handling code here:
        try{
            move(noteTable.getSelectedRow());
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage(), "Erreur de deplacement", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_noteTableMouseClicked

    private void codeMatiereFormattedFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeMatiereFormattedFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codeMatiereFormattedFieldActionPerformed

    private void numEtudiantFormattedFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numEtudiantFormattedFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numEtudiantFormattedFieldActionPerformed

    private void move(int i){
        try{
            numEtudiantFormattedField.setText(model.getValueAt(i, 0).toString());
            codeMatiereFormattedField.setText(model.getValueAt(i, 1).toString());
            noteFormattedField.setText(model.getValueAt(i, 2).toString());
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage(), "Erreur de deplacement", JOptionPane.ERROR_MESSAGE);
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualiserButton;
    private javax.swing.JButton ajouterButton;
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JFormattedTextField codeMatiereFormattedField;
    private javax.swing.JLabel codeMatiereLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JPanel listePanel;
    private javax.swing.JButton modifierButton;
    private javax.swing.JFormattedTextField noteFormattedField;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JScrollPane noteScrollPane;
    private javax.swing.JTable noteTable;
    private javax.swing.JFormattedTextField numEtudiantFormattedField;
    private javax.swing.JLabel numEtudiantLabel;
    private javax.swing.JPanel operationPanel;
    private javax.swing.JTextField recherche1Field;
    private javax.swing.JTextField recherche2Field;
    private javax.swing.JButton rechercheButton;
    private javax.swing.JComboBox<String> rechercheComboBox;
    private javax.swing.JPanel recherchePanel;
    private javax.swing.JLabel rechercheParLabel;
    private javax.swing.JButton supprimerButton;
    // End of variables declaration//GEN-END:variables
}
