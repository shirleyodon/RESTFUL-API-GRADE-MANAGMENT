/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eni.m1.java.ws.dialog;

import eni.m1.java.ws.entities.LigneClassement;
import eni.m1.java.ws.entities.Utilisateur;
import eni.m1.java.ws.service.RegistreService;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author shirleyodon
 */
public class Chart extends javax.swing.JDialog {

    /**
     * Creates new form Chart
     */
    
    private JFreeChart chart;
    private ChartPanel chartPanel;
    private final Dimension chartPanelDimension=new Dimension(480, 430);
    private String niveau;
    private final RegistreService service;
    private final Utilisateur profile;
    
    public Chart(java.awt.Frame parent, boolean modal, Utilisateur user, String niveau, LigneClassement[] data) {
        super(parent, modal);
        initComponents();
        this.niveau=niveau;
        setLocationRelativeTo(null);
        creatPieChart(repartirDonnees(data));
        initChartPanel();
        initGraphPanel();
        service=new RegistreService();
        profile=user;
        parameters();
    }
    
    private List<ClefValeur> repartirDonnees(LigneClassement[] data){
        List<ClefValeur> list=new ArrayList();
        ClefValeur admis=new ClefValeur("ADMIS");
        ClefValeur redouble=new ClefValeur("REDOUBLES");
        ClefValeur exclu=new ClefValeur("EXCLUS");
        
        for(LigneClassement d: data){
            if(d.getMoyenne()>=10)
                admis.incrementValue();
            else if(d.getMoyenne()>=7.5)
                redouble.incrementValue();
            else
                exclu.incrementValue();
        }
        
        list.add(admis);
        list.add(redouble);
        list.add(exclu);
        return list;
    }
    
    private void creatPieChart(List<ClefValeur> list){
        DefaultPieDataset dataset=new DefaultPieDataset();
        for(ClefValeur elem: list)
            dataset.setValue(elem.getKey(), elem.getValue());
        
        chart=ChartFactory.createPieChart("", dataset, true, true, false);
     
        TextTitle title=new TextTitle("Répartition des "+niveau+" selon leurs résultats",new Font ("Trebuchet MS", Font.BOLD , 20));
        chart.setTitle(title);
        chart.getTitle().setPaint(new Color(44,62,80));
        
        PiePlot plot=(PiePlot)chart.getPlot();
        plot.setBackgroundPaint(new Color(255, 255, 255, 0));
        plot.setSectionPaint(list.get(0).getKey(), Color.GREEN);
        plot.setSectionPaint(list.get(1).getKey(), Color.YELLOW);
        plot.setSectionPaint(list.get(2).getKey(), Color.RED);
    }
    
    private void initChartPanel(){
        chartPanel=new ChartPanel(chart);
        chartPanel.setPreferredSize(chartPanelDimension);
    }
    
    private void initGraphPanel(){
        graphPanel.setLayout(new BorderLayout());
        graphPanel.add(chartPanel, BorderLayout.CENTER);
        graphPanel.validate();
    }
    
    private String toChaine(Integer d){
        return (d<10)? "0"+d.toString(): d.toString();
    }
    
    private String obtenirHeure(Calendar cal){
        String h=toChaine(cal.get(Calendar.HOUR_OF_DAY)),
               m=toChaine(cal.get(Calendar.MINUTE)),
               s=toChaine(cal.get(Calendar.SECOND));
        return h+m+s;
    }
    
    private String obtenirDate(Calendar cal){
        String dd=toChaine(cal.get(Calendar.DAY_OF_MONTH)),
               mm=toChaine(cal.get(Calendar.MONTH)+1),
               yy=toChaine(cal.get(Calendar.YEAR));
        return dd+mm+yy;
    }
    
    private String nomFichier(Calendar cal){
        return "PieChart"+niveau+"_"+obtenirDate(cal)+obtenirHeure(cal)+".jpeg";
    }
    
    private void parameters(){
        if(profile.getStatut().equals("Visitor"))
            saveImageButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        fermerLabel = new javax.swing.JLabel();
        bodyPanel = new javax.swing.JPanel();
        graphPanel = new javax.swing.JPanel();
        saveImageButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        titlePanel.setBackground(new java.awt.Color(248, 148, 6));

        titleLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("Graphe de répartition");

        fermerLabel.setBackground(new java.awt.Color(248, 148, 6));
        fermerLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 19)); // NOI18N
        fermerLabel.setForeground(new java.awt.Color(255, 255, 255));
        fermerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fermerLabel.setText("X");
        fermerLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        fermerLabel.setOpaque(true);
        fermerLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                fermerLabelMouseMoved(evt);
            }
        });
        fermerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fermerLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fermerLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fermerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(fermerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bodyPanel.setBackground(new java.awt.Color(44, 62, 80));

        graphPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Trebuchet MS", 1, 22), new java.awt.Color(255, 255, 255))); // NOI18N
        graphPanel.setOpaque(false);
        graphPanel.setPreferredSize(new java.awt.Dimension(500, 450));

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 446, Short.MAX_VALUE)
        );

        saveImageButton.setBackground(new java.awt.Color(34, 167, 240));
        saveImageButton.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        saveImageButton.setForeground(new java.awt.Color(255, 255, 255));
        saveImageButton.setText("Sauvegarder l'image");
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bodyPanelLayout = new javax.swing.GroupLayout(bodyPanel);
        bodyPanel.setLayout(bodyPanelLayout);
        bodyPanelLayout.setHorizontalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bodyPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bodyPanelLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(saveImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bodyPanelLayout.setVerticalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveImageButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bodyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 510, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fermerLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fermerLabelMouseMoved
        // TODO add your handling code here:
        fermerLabel.setBackground(new java.awt.Color(242,38,19));
    }//GEN-LAST:event_fermerLabelMouseMoved

    private void fermerLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fermerLabelMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_fermerLabelMouseClicked

    private void fermerLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fermerLabelMouseExited
        // TODO add your handling code here:
        fermerLabel.setBackground(new java.awt.Color(248,148,6));
    }//GEN-LAST:event_fermerLabelMouseExited

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        // TODO add your handling code here:
        Calendar cal=Calendar.getInstance();
        String fileName=nomFichier(cal);
        String path="C:\\Users\\26134\\Documents\\NetBeansProjects\\GradeManagementCLIENT2\\chart\\";
        File file=new File(path+fileName);
        String message="L'image a été sauvegardée sous le :\n"
                        + "\tNom : "+fileName+"\n"
                        + "\tRépertoire : "+path;
        
        try{
            ChartUtils.saveChartAsJPEG(file, chart, 500, 450);
            JOptionPane.showMessageDialog(null, message, "Succès de la sauvegarde", JOptionPane.INFORMATION_MESSAGE);
            service.saveToLog(profile.getLogin(), "SAUVEGARDE", fileName);
        }catch(IOException ex){
            Logger.getLogger(Dialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private class ClefValeur{
        private String key;
        private int value;
        
        public ClefValeur(String k){
            key=k;
            value=0;
        }
        
        public ClefValeur(String k, int v){
            key=k;
            value=v;
        }

        public String getKey() {
            return key;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public int getValue() {
            return value;
        }

        public void setValue(int value) {
            this.value = value;
        }
        
        public void incrementValue(){
            value++;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                eni.m1.java.ws.service.ClassementService service=new eni.m1.java.ws.service.ClassementService();
                Utilisateur visitor=new Utilisateur("VISITEUR", "Visiteur", "Visitor", "pwd", "Visitor");
                Chart dialog = new Chart(new javax.swing.JFrame(), true, visitor,"L2", service.getAll("L2"));
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JLabel fermerLabel;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JButton saveImageButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}
